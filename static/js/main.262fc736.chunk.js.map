{"version":3,"sources":["redux/types/futureWeather.ts","common/components/Page/Header.tsx","common/components/Page/Footer.tsx","common/components/Page/Main.tsx","common/components/Page/Page.tsx","common/components/Block/Block.tsx","common/components/Field/Field.tsx","common/constants/cities.ts","common/components/SelectField/SelectField.tsx","api/weatherApi.ts","redux/types/pastWeather.ts","redux/actions/futureWeather.ts","common/components/WeatherCard/WeatherCard.tsx","common/components/Slider/Slider.tsx","components/FutureForecast/FutureForecast.tsx","redux/reducers/futureWeather.ts","redux/reducers/pastWeather.ts","redux/reducers/index.ts","redux/store/store.ts","common/date.ts","common/components/DateField/DateField.tsx","redux/actions/pastWeather.ts","components/PastForecast/PastForecast.tsx","App.tsx","index.tsx"],"names":["Constants","Header","className","Footer","Main","children","Page","Block","title","Filters","Result","ErrorRequest","text","Placeholder","Field","name","value","placeholder","error","onClick","fieldClassName","CITIES","coordinates","timezoneOffset","SelectField","handleChange","city","useState","isOpenModal","setIsOpenModal","closeModal","fieldClass","SelectModal","modalRef","useRef","useEffect","handleClickOutsideModal","e","current","contains","target","document","addEventListener","removeEventListener","ref","map","TOKEN","handleError","response","json","then","err","Error","message","getFutureForecast","dispatch","type","CHANGE_CITY_FOR_FUTURE","payload","GET_7_DAYS_FORECAST_REQUEST","params","url","fetch","ok","result","daily","item","date","Date","dt","toLocaleString","year","month","day","temperature","Math","round","temp","image","weather","icon","getFutureForecastApi","res","GET_7_DAYS_FORECAST_SUCCESS","catch","GET_7_DAYS_FORECAST_ERROR","WeatherCard","styleBackground","background","temperatureSign","style","Slider","items","changePage","page","countOnPage","lastPage","length","index","weatherClass","FutureForecast","useDispatch","useSelector","state","futureWeather","CHANGE_PAGE","errorRequest","initialValue","isLoading","newPage","initialState","errorDate","rootReducer","combineReducers","pastWeather","action","GET_DATE_FORECAST_REQUEST","GET_DATE_FORECAST_SUCCESS","GET_DATE_FORECAST_ERROR","ADD_DATE_ERROR","REMOVE_DATE_ERROR","CHANGE_DATE","CHANGE_CITY_FOR_PAST","store","createStore","applyMiddleware","thunk","getMinDateUTC","getTodayTimestampUTC","countAllowedDaysBefore","currentDate","setHours","timestampToSecondFromMSecond","getTime","getTimezoneOffset","convertDateToTimestampForWeathermap","dateIso","cityTimezoneOffset","today","timestamp","floor","convertTimestampToIsoString","toISOString","split","getMinIsoDate","getMaxIsoDate","DateField","console","log","onChange","min","max","required","getPastForecastByDateAndCity","getState","getDateForecastApi","changeDateAndSend","changeDate","detectValidDate","changeCityAndSend","changeCity","PastForecast","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.262fc736.chunk.js","sourcesContent":["import {cityType, weatherType} from \"./weather\";\r\n\r\nexport type  futureWeatherStateType = {\r\n    isLoading: boolean,\r\n    result: Array<weatherType>,\r\n    city: null | cityType,\r\n    page: number,\r\n    countOnPage: number,\r\n    errorRequest: null | string\r\n}\r\n\r\nexport enum Constants {\r\n    GET_7_DAYS_FORECAST_REQUEST = 'GET_7_DAYS_FORECAST_REQUEST',\r\n    GET_7_DAYS_FORECAST_SUCCESS = 'GET_7_DAYS_FORECAST_SUCCESS',\r\n    GET_7_DAYS_FORECAST_ERROR   = 'GET_7_DAYS_FORECAST_ERROR',\r\n    CHANGE_CITY_FOR_FUTURE = 'CHANGE_CITY_FOR_FUTURE',\r\n    CHANGE_PAGE = 'CHANGE_PAGE',\r\n}","import './scss/Header.scss';\r\n\r\nexport const Header = () => {\r\n    return <header className={'header'}>\r\n        <h1 className=\"header__title\">\r\n            <span className={'header__title-top'}>Weather</span>\r\n            <span className={'header__title-bottom'}>forecast</span>\r\n        </h1>\r\n    </header>;\r\n}","import './scss/Footer.scss';\r\n\r\nexport const Footer = () => {\r\n    return <footer className={'footer'}>\r\n        <div className=\"footer__content\">\r\n            C ЛЮБОВЬЮ ОТ MERCURY DEVELOPMENT\r\n        </div>\r\n    </footer>\r\n}","import './scss/Main.scss';\r\n\r\ntype mainProps = {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const Main = ({children} : mainProps) => {\r\n    return <main className={'main'}>\r\n        <div className=\"main__content\">\r\n            {children}\r\n        </div>\r\n    </main>;\r\n}","import './scss/Page.scss';\r\nimport {Header} from \"./Header\";\r\nimport {Footer} from \"./Footer\";\r\nimport {Main} from \"./Main\";\r\n\r\ntype pageProps = {\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const Page = ({children} : pageProps) => {\r\n    return <div className={'page'}>\r\n        <div className=\"page__inside\">\r\n            <Header />\r\n            <Main>{children}</Main>\r\n            <Footer />\r\n        </div>\r\n        <div className=\"page__background page__background_top\" />\r\n        <div className=\"page__background page__background_bottom\" />\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import './Block.scss';\r\n\r\n\r\ntype blockProps = {\r\n    title: string,\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const Block = ({title, children} : blockProps) => {\r\n    return <article className={'block'}>\r\n        <header className=\"block__header\">\r\n            <h1 className=\"block__title\">{title}</h1>\r\n        </header>\r\n        <div className=\"block__body\">\r\n            {children}\r\n        </div>\r\n    </article>\r\n}\r\n\r\n\r\nexport const Filters = ({children} : { children: React.ReactNode }) => {\r\n    return <div className={'block__filters'}>\r\n        {children}\r\n    </div>\r\n}\r\n\r\nexport const Result = ({children} : {children: React.ReactNode}) => {\r\n    return <div className={'block__result'}>\r\n        {children}\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport const ErrorRequest = ({text} : { text: string }) => {\r\n    return <div className={'block__error'}>{text}</div>;\r\n}\r\n\r\nexport const Placeholder = () => {\r\n    return <div className={'placeholder'}>\r\n        <div className=\"placeholder__image\" />\r\n        <div className=\"placeholder__text\">Fill in all the fields and the weather will be displayed</div>\r\n    </div>\r\n}\r\n","import './Field.scss';\r\n\r\n\r\ntype fieldProps = {\r\n    name: string,\r\n    className?: string,\r\n    value?: string | null,\r\n    placeholder: string,\r\n    children: React.ReactNode\r\n    onClick?: any,\r\n    error?: null | string\r\n}\r\n\r\n\r\n\r\nexport const Field = ({name, className, value, placeholder, children, error, onClick} : fieldProps) => {\r\n\r\n    const handleClick = () => {\r\n        if (onClick) {\r\n            onClick();\r\n        }\r\n    }\r\n    let fieldClassName = `field_${name} ` + (className ? className : '');\r\n    fieldClassName += (error) ? ' field_error' : '';\r\n    fieldClassName += (!value) ? ' field_is-empty' : ' field_not-empty';\r\n\r\n    return <div className={'field '+fieldClassName}>\r\n        <div className=\"field__input\" onClick={handleClick}>\r\n            {children}\r\n\r\n            <div className={'field__placeholder'}>{placeholder}</div>\r\n        </div>\r\n        {\r\n            error && <div className={'field__error'}>{error}</div>\r\n        }\r\n    </div>\r\n}","import {cityType} from \"../../redux/types/weather\";\r\n\r\n\r\nexport const CITIES : Array<cityType> = [\r\n    {\r\n        name: 'Самара',\r\n        coordinates: [53.195873, 50.100193],\r\n        timezoneOffset: 14400\r\n    },\r\n    {\r\n        name: 'Тольятти',\r\n        coordinates: [53.507836, 49.420393],\r\n        timezoneOffset: 14400\r\n    },\r\n    {\r\n        name: 'Саратов',\r\n        coordinates: [51.533557, 46.034257],\r\n        timezoneOffset: 14400\r\n    },\r\n    {\r\n        name: 'Казань',\r\n        coordinates: [55.796127, 49.106405],\r\n        timezoneOffset: 10800\r\n    },\r\n    {\r\n        name: 'Краснодар',\r\n        coordinates: [45.035470, 38.975313],\r\n        timezoneOffset: 10800\r\n    },\r\n];","import './SelectField.scss';\r\n\r\nimport {Field} from \"../Field/Field\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {CITIES} from \"../../constants/cities\";\r\nimport {cityType} from \"../../../redux/types/weather\";\r\n\r\n\r\ntype selectFieldProps = {\r\n    handleChange?: (city: cityType) => void,\r\n    city: null | cityType\r\n}\r\n\r\n\r\n\r\nexport const SelectField = ({handleChange, city} : selectFieldProps) => {\r\n    const [isOpenModal, setIsOpenModal] = useState<boolean>(false);\r\n\r\n    let value = (city) ? city.name : null;\r\n\r\n    const closeModal = () => {\r\n        setIsOpenModal(!isOpenModal);\r\n    }\r\n\r\n    const selectOption = (value: cityType) => {\r\n        setIsOpenModal(false);\r\n        if (handleChange) handleChange(value);\r\n    }\r\n\r\n    let fieldClass = (isOpenModal) ? 'field_is-open' : '';\r\n\r\n    return <Field className={fieldClass}\r\n                  name={'select'}\r\n                  placeholder={'Select city'}\r\n                  value={value}\r\n                  onClick={closeModal}>\r\n        <div className={'input input_select'}>{value}</div>\r\n        {\r\n            isOpenModal && <SelectModal onClick={selectOption} closeModal={closeModal}/>\r\n        }\r\n    </Field>\r\n}\r\n\r\n\r\ntype selectModalProps = {\r\n    closeModal: () => void,\r\n    onClick: (city: cityType) => void\r\n}\r\n\r\nconst SelectModal = ({onClick, closeModal} : selectModalProps) => {\r\n\r\n    const modalRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutsideModal = (e: MouseEvent) => {\r\n            if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\r\n                closeModal();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', handleClickOutsideModal);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutsideModal);\r\n        }\r\n    }, [closeModal]);\r\n\r\n\r\n\r\n    return <div className=\"select-modal\" ref={modalRef}>\r\n        <ul className={'select-modal__list'}>\r\n            {CITIES.map((city) => <li className='select-modal__option' onClick={() => onClick(city)} key={city.name}>{city.name}</li>)}\r\n        </ul>\r\n    </div>\r\n}","import {cityType} from \"../redux/types/weather\";\r\n\r\nconst TOKEN = '3c237680bd869ff1f9b731f466278d6b';\r\n\r\nexport const handleError = (response: Response) => {\r\n        return response\r\n            .json()\r\n            .then((err : {code: number, message: string}) => {\r\n                throw new Error(err.message);\r\n            })\r\n}\r\n\r\ntype dailyResponseType = {\r\n    dt: number,\r\n    temp: {\r\n        day: number\r\n    },\r\n    weather: Array<{icon: string}>\r\n}\r\n\r\nexport const getFutureForecastApi = (params: cityType) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${params.coordinates[0]}&lon=${params.coordinates[1]}&units=metric&exclude=hourly,minutely,alerts&appid=${TOKEN}`\r\n\r\n    return fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                return handleError(response);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(result => result.daily.map((item: dailyResponseType) => ({\r\n                date: new Date(item.dt * 1000).toLocaleString('en-GB', {\r\n                    year: \"numeric\", month: \"short\", day: \"numeric\"\r\n                }),\r\n                temperature: Math.round(item.temp.day),\r\n                image: `https://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`\r\n            }))\r\n        )\r\n}\r\n\r\ntype dateParamsType = {\r\n    city: cityType,\r\n    date: number\r\n}\r\n\r\nexport const getDateForecastApi = (params: dateParamsType) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${params.city.coordinates[0]}&lon=${params.city.coordinates[1]}&dt=${params.date}&units=metric&appid=${TOKEN}`\r\n\r\n    return fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                return handleError(response);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(result =>  ({\r\n                date: new Date(result.current.dt * 1000).toLocaleString('en-GB', {\r\n                    year: \"numeric\", month: \"short\", day: \"numeric\"\r\n                }),\r\n                temperature: Math.round(result.current.temp),\r\n                image: `https://openweathermap.org/img/wn/${result.current.weather[0].icon}@2x.png`\r\n            }));\r\n}","import {cityType, weatherType} from \"./weather\";\r\n\r\nexport type pastWeatherStateType = {\r\n    isLoading: boolean,\r\n    result: null | weatherType,\r\n    date: null | string,\r\n    city: null | cityType,\r\n    errorDate: null | string,\r\n    errorRequest: null | string\r\n}\r\n\r\nexport enum Constants {\r\n    GET_DATE_FORECAST_REQUEST = 'GET_DATE_FORECAST_REQUEST',\r\n    GET_DATE_FORECAST_SUCCESS = 'GET_DATE_FORECAST_SUCCESS',\r\n    GET_DATE_FORECAST_ERROR = 'GET_DATE_FORECAST_ERROR',\r\n    CHANGE_DATE = 'CHANGE_DATE',\r\n    CHANGE_CITY_FOR_PAST = 'CHANGE_CITY_FOR_PAST',\r\n    ADD_DATE_ERROR   = 'ADD_DATE_ERROR',\r\n    REMOVE_DATE_ERROR = 'REMOVE_DATE_ERROR',\r\n}","import {AppThunk, cityType} from \"../types/weather\";\r\nimport {Constants} from \"../types/futureWeather\";\r\nimport {getFutureForecastApi, handleError} from \"../../api/weatherApi\";\r\n\r\n\r\nexport const getFutureForecast = (city: cityType): AppThunk => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: Constants.CHANGE_CITY_FOR_FUTURE,\r\n        payload: city\r\n    });\r\n\r\n    dispatch({\r\n        type: Constants.GET_7_DAYS_FORECAST_REQUEST\r\n    });\r\n\r\n    getFutureForecastApi(city)\r\n        .then(res => {\r\n            dispatch({\r\n                type: Constants.GET_7_DAYS_FORECAST_SUCCESS,\r\n                payload: res\r\n            });\r\n        })\r\n        .catch((err: Error) => {\r\n            dispatch({\r\n                type: Constants.GET_7_DAYS_FORECAST_ERROR,\r\n                payload: err.message\r\n            });\r\n        })\r\n\r\n}\r\n\r\nexport const changePage = (page: number) => ({type: Constants.CHANGE_PAGE, payload: page});","import './WeatherCard.scss';\r\nimport {weatherType} from \"../../../redux/types/weather\";\r\n\r\n\r\ntype weatherCardProps = {\r\n    weather: weatherType,\r\n    className?: string,\r\n};\r\n\r\nexport const WeatherCard = ({weather, className} : weatherCardProps) => {\r\n    const styleBackground = {\r\n        background: `url(${weather.image}) 50% 50% no-repeat`\r\n    }\r\n\r\n    const temperatureSign = (weather.temperature > 0) ? '+' : '';\r\n\r\n    return <div className={'weather-card ' + (className ? className : '')}>\r\n        <div className=\"weather-card__inside\">\r\n            <div className=\"weather-card__date\">{weather.date}</div>\r\n            <div className=\"weather-card__image\" style={styleBackground}/>\r\n            <div className=\"weather-card__temperature\">{temperatureSign}{weather.temperature}°</div>\r\n        </div>\r\n    </div>;\r\n}","import './Slider.scss';\r\nimport {WeatherCard} from \"../WeatherCard/WeatherCard\";\r\nimport {useState} from \"react\";\r\nimport {weatherType} from \"../../../redux/types/weather\";\r\n\r\n\r\ntype sliderProps = {\r\n    items: Array<weatherType>,\r\n    changePage: (newPage: number) => void,\r\n    page: number,\r\n    countOnPage: number\r\n}\r\n\r\nexport const Slider = ({items, changePage, page, countOnPage} : sliderProps) => {\r\n\r\n    const lastPage = items.length - countOnPage;\r\n\r\n    return <div className={'slider'}>\r\n            <div className=\"slider__inside\">\r\n                {items.map((item , index: number) => {\r\n                    let weatherClass = (index >= page && index<page+3) ? '' : 'weather-card_hidden';\r\n                    return <WeatherCard key={item.date} weather={item} className={weatherClass} />;\r\n                })}\r\n            </div>\r\n        <div className={\"slider__btn slider__btn_left \" + ((page === 0) ? 'slider__btn_disable' : '')} onClick={() => changePage(page-1)} />\r\n        <div className={\"slider__btn slider__btn_right \" + ((page === lastPage) ? 'slider__btn_disable' : '')} onClick={() => changePage(page+1)} />\r\n    </div>\r\n}","import './FutureForecast.scss';\r\n\r\nimport {Block, ErrorRequest, Filters, Placeholder, Result} from \"../../common/components/Block/Block\";\r\nimport {SelectField} from \"../../common/components/SelectField/SelectField\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootStateType} from \"../../redux/types/weather\";\r\nimport {changePage, getFutureForecast} from \"../../redux/actions/futureWeather\";\r\nimport {Slider} from \"../../common/components/Slider/Slider\";\r\n\r\nexport const FutureForecast = () => {\r\n    const dispatch = useDispatch();\r\n    const weather = useSelector((state: rootStateType) => state.futureWeather);\r\n\r\n    return <Block title={'7 Days Forecast'}>\r\n        <Filters>\r\n            <SelectField handleChange={(city) => dispatch(getFutureForecast(city))} city={weather.city}/>\r\n        </Filters>\r\n        {\r\n            weather.result.length ?\r\n                <Result><Slider items={weather.result} page={weather.page} countOnPage={weather.countOnPage}\r\n                                changePage={(page) => dispatch(changePage(page))}/></Result> : <Placeholder/>\r\n        }\r\n        {\r\n            weather.errorRequest && <ErrorRequest text={weather.errorRequest} />\r\n        }\r\n    </Block>\r\n}\r\n\r\n","import {weatherType} from \"../types/weather\";\r\nimport {AnyAction} from \"redux\";\r\nimport {Constants, futureWeatherStateType} from \"../types/futureWeather\";\r\n\r\n\r\nconst initialValue = {\r\n    isLoading: false,\r\n    result: [],\r\n    city: null,\r\n    page: 0,\r\n    countOnPage: 3,\r\n    errorRequest: null\r\n}\r\n\r\nexport const futureWeatherReducer = (state: futureWeatherStateType = initialValue, action: AnyAction): futureWeatherStateType => {\r\n    switch (action.type) {\r\n        case Constants.GET_7_DAYS_FORECAST_REQUEST:\r\n            return {\r\n                ...state,\r\n                result:[],\r\n                page: 0,\r\n                isLoading: true,\r\n                errorRequest: null,\r\n            };\r\n        case Constants.GET_7_DAYS_FORECAST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n                isLoading: false\r\n            };\r\n        case Constants.GET_7_DAYS_FORECAST_ERROR:\r\n            return {\r\n                ...state,\r\n                result: [],\r\n                errorRequest: action.payload,\r\n                isLoading: false\r\n            };\r\n        case Constants.CHANGE_CITY_FOR_FUTURE:\r\n            return {\r\n                ...state,\r\n                city: action.payload\r\n            }\r\n        case Constants.CHANGE_PAGE:\r\n            return changePage(action.payload, state);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst changePage = (newPage: number, state: futureWeatherStateType) => {\r\n    const lastPage = state.result.length - state.countOnPage;\r\n    if (newPage >= 0 && newPage <= lastPage) {\r\n        return {\r\n            ...state,\r\n            page: newPage\r\n        };\r\n    }\r\n\r\n    return state;\r\n}","import {AnyAction} from \"redux\";\r\nimport {Constants, pastWeatherStateType} from \"../types/pastWeather\";\r\n\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    result: null,\r\n    date: null,\r\n    city: null,\r\n    errorDate: null,\r\n    errorRequest: null\r\n}\r\n\r\n\r\nexport const pastWeatherReducer = (state: pastWeatherStateType = initialState, action: AnyAction) => {\r\n    switch (action.type){\r\n        case Constants.GET_DATE_FORECAST_REQUEST:\r\n            return {\r\n                ...state,\r\n                result: null,\r\n                errorRequest: null,\r\n                isLoading: true\r\n            };\r\n\r\n        case Constants.GET_DATE_FORECAST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                result: action.payload,\r\n                isLoading: false\r\n            };\r\n        case Constants.GET_DATE_FORECAST_ERROR:\r\n            return {\r\n                ...state,\r\n                result: null,\r\n                errorRequest: action.payload,\r\n                isLoading: false\r\n            };\r\n        case Constants.ADD_DATE_ERROR:\r\n            return {\r\n                ...state,\r\n                result: null,\r\n                errorDate: action.payload,\r\n                isLoading: false\r\n            };\r\n        case Constants.REMOVE_DATE_ERROR:\r\n            return {\r\n                ...state,\r\n                errorDate: null,\r\n            };\r\n        case Constants.CHANGE_DATE:\r\n            return {\r\n                ...state,\r\n                date: action.payload\r\n            };\r\n        case Constants.CHANGE_CITY_FOR_PAST:\r\n            return {\r\n                ...state,\r\n                city: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {futureWeatherReducer} from \"./futureWeather\";\r\nimport {pastWeatherReducer} from \"./pastWeather\";\r\n\r\n\r\nexport const rootReducer = combineReducers({pastWeather: pastWeatherReducer, futureWeather: futureWeatherReducer})","import {applyMiddleware, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {rootReducer} from \"../reducers\";\r\n\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppDispatch = typeof store.dispatch;","const countAllowedDaysBefore = 5;\r\n\r\nexport const getMinDateUTC = () => getTodayTimestampUTC() - countAllowedDaysBefore * 24 * 3600; // 00:00:00 for UTC..\r\n\r\nconst getTodayTimestampUTC = () => {\r\n    const currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n    return timestampToSecondFromMSecond((currentDate.getTime()  - currentDate.getTimezoneOffset() * 60000));\r\n}\r\n\r\nexport const convertDateToTimestampForWeathermap = (dateIso: string, cityTimezoneOffset: number) => {\r\n\r\n    const today = getTodayTimestampUTC();\r\n    const date = new Date(dateIso);\r\n    const timestamp = timestampToSecondFromMSecond(date.getTime()); // UTC 00:00  Samara 04:00 / Kazan 03:00\r\n\r\n    if (today === timestamp ) {\r\n        //is today\r\n        return timestampToSecondFromMSecond(new Date().getTime()); // current\r\n    } else {\r\n        return timestamp - cityTimezoneOffset + 14 * 3600; // 14 : 00 - Local Time\r\n    }\r\n}\r\n\r\n\r\nconst timestampToSecondFromMSecond = (timestamp: number) => {\r\n    return Math.floor( timestamp / 1000);\r\n}\r\n\r\nexport const convertTimestampToIsoString = (date: number) => {\r\n    return new Date(date * 1000).toISOString().split('T')[0];\r\n}\r\n\r\n\r\nexport const getMinIsoDate = () => convertTimestampToIsoString(getMinDateUTC());\r\nexport const getMaxIsoDate = () => convertTimestampToIsoString(getTodayTimestampUTC());\r\n\r\n\r\nexport const detectValidDate = (dateIso: string) => {\r\n    const today = new Date();\r\n    const date = new Date(dateIso);\r\n    const timestamp = timestampToSecondFromMSecond(date.getTime());\r\n    return (timestamp >= getMinDateUTC() && timestamp <= timestampToSecondFromMSecond(today.getTime()));\r\n\r\n}","import './DateField.scss';\r\nimport {Field} from \"../Field/Field\";\r\nimport React from \"react\";\r\nimport {getMaxIsoDate, getMinIsoDate} from \"../../date\";\r\n\r\n\r\ntype dateFieldProps = {\r\n    handleChange: (date: string) => void,\r\n    date: null | string,\r\n    error: null | string\r\n}\r\n\r\nexport const DateField = ({handleChange, date, error} : dateFieldProps) => {\r\n\r\n    console.log(getMinIsoDate());\r\n    console.log(getMaxIsoDate());\r\n\r\n\r\n    return <Field name={'date'} placeholder={'Select date'} value={date} error={error}>\r\n        <input type={'date'} className={'input input_date'}  placeholder={'Select date'} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {handleChange(e.target.value)} } min={getMinIsoDate()} max={getMaxIsoDate()} required />\r\n    </Field>\r\n}","import {AppThunk, cityType} from \"../types/weather\";\r\nimport {Constants} from \"../types/pastWeather\";\r\nimport {getDateForecastApi} from \"../../api/weatherApi\";\r\nimport {\r\n    convertDateToTimestampForWeathermap,\r\n    detectValidDate,\r\n} from \"../../common/date\";\r\n\r\n\r\nconst changeDate = (date: string) => ({type: Constants.CHANGE_DATE, payload: date});\r\nconst changeCity = (city: cityType) => ({type: Constants.CHANGE_CITY_FOR_PAST, payload: city});\r\n\r\n\r\nconst getPastForecastByDateAndCity = (): AppThunk => (dispatch, getState) => {\r\n\r\n    const params = getState().pastWeather;\r\n\r\n    if (!params.errorDate && params.date && params.city) {\r\n        dispatch({\r\n            type: Constants.GET_DATE_FORECAST_REQUEST\r\n        });\r\n\r\n        getDateForecastApi({\r\n            city: params.city,\r\n            date: convertDateToTimestampForWeathermap(params.date, params.city.timezoneOffset)\r\n        })\r\n            .then(res => {\r\n                dispatch({\r\n                    type: Constants.GET_DATE_FORECAST_SUCCESS,\r\n                    payload: res\r\n                });\r\n            })\r\n            .catch((err: Error) => {\r\n                dispatch({\r\n                    type: Constants.GET_DATE_FORECAST_ERROR,\r\n                    payload: err.message\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeDateAndSend = (date: string): AppThunk => (dispatch) => {\r\n\r\n    dispatch(changeDate(date));\r\n\r\n    if (detectValidDate(date)) {\r\n        dispatch({type: Constants.REMOVE_DATE_ERROR});\r\n        dispatch(getPastForecastByDateAndCity());\r\n    } else {\r\n        dispatch({\r\n            type: Constants.ADD_DATE_ERROR,\r\n            payload: 'Not valid date.'\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const changeCityAndSend = (city: cityType): AppThunk => (dispatch) => {\r\n    dispatch(changeCity(city));\r\n\r\n    dispatch(getPastForecastByDateAndCity());\r\n}\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {Block, ErrorRequest, Filters, Placeholder, Result} from \"../../common/components/Block/Block\";\r\nimport {SelectField} from \"../../common/components/SelectField/SelectField\";\r\nimport {DateField} from \"../../common/components/DateField/DateField\";\r\nimport {WeatherCard} from \"../../common/components/WeatherCard/WeatherCard\";\r\nimport {changeCityAndSend, changeDateAndSend} from \"../../redux/actions/pastWeather\";\r\nimport {rootStateType} from \"../../redux/types/weather\";\r\n\r\n\r\nexport const PastForecast = () => {\r\n    const dispatch = useDispatch();\r\n    const weather = useSelector((state: rootStateType) => state.pastWeather);\r\n\r\n    return <Block title={'Forecast for a Date in the Past'}>\r\n        <Filters>\r\n            <SelectField handleChange={(city) =>  dispatch(changeCityAndSend(city))} city={weather.city}/>\r\n            <DateField handleChange={(date) =>  dispatch(changeDateAndSend(date))} date={weather.date} error={weather.errorDate}/>\r\n        </Filters>\r\n        {\r\n            weather.result ? <Result><WeatherCard weather={weather.result} className={'weather-card_full'} /></Result> : <Placeholder />\r\n        }\r\n        {\r\n            weather.errorRequest && <ErrorRequest text={weather.errorRequest} />\r\n        }\r\n    </Block>\r\n}\r\n\r\n","import 'normalize.css';\nimport './styles/common.scss';\nimport './App.css';\n\nimport React from 'react';\n\n\nimport {Page} from \"./common/components/Page/Page\";\nimport {FutureForecast} from \"./components/FutureForecast/FutureForecast\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store/store\";\nimport {PastForecast} from \"./components/PastForecast/PastForecast\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <Page>\n                    <FutureForecast />\n                    <PastForecast />\n                </Page>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}